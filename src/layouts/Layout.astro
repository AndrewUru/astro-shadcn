---
import { Sidebar } from "@/components/Sidebar";
import { ChatAssistant } from "@/components/ChatAssistant";
import "../styles/global.css";

interface Props {
  title: string;
  description?: string;
  children: any;
}

const navigation = [
  { title: "Home", path: "/", icon: "Home" },
  { title: "Chat", path: "/chat", icon: "Chat" },
  { title: "README", path: "/readme", icon: "FileText" },
  { title: "MIT License", path: "/mit-license", icon: "Scale" }
];

const { 
  title,
  description = "A beautiful dashboard built with Astro and shadcn/ui"
} = Astro.props;

const preconnectUrls = [
  'https://fonts.googleapis.com',
  'https://fonts.gstatic.com'
];

const hideChatPaths = ['/chat'];
const currentPath = Astro.url.pathname;
const showChatAssistant = !hideChatPaths.includes(currentPath);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="preconnect" href="/" crossorigin="anonymous">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    {preconnectUrls.map(url => (
      <link rel="preconnect" href={url} crossorigin="anonymous" />
    ))}
    
    <title>{title}</title>

    <script is:inline>
      const theme = localStorage.getItem('theme') || 
        (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
      document.documentElement.classList[theme === 'dark' ? 'add' : 'remove']('dark');
    </script>
  </head>
  <body class="min-h-screen bg-background font-sans antialiased">
    <div class="flex h-screen optimize-gpu">
      <div id="left-sidebar" class="w-[80px] shrink-0 border-r transition-all">
        <Sidebar navigation={navigation} client:load /> 
      </div>
      
      <div class="flex-1 flex flex-col min-w-0">
        <header id="top-header" class="h-16 border-b flex items-center px-6 gap-4">
          <button id="toggle-left" class="p-2 hover:bg-accent rounded-lg">‚â°</button>
          <button id="toggle-right" class="p-2 hover:bg-accent rounded-lg">üí¨</button>
        </header>
        
        <main class="flex-1 overflow-auto p-6">
          <slot />
        </main>
        
        <footer id="bottom-footer" class="h-12 border-t flex items-center px-6 text-sm text-muted-foreground">
          ¬© 2025 Your Company Name
        </footer>
      </div>
      
      <div id="right-panel" class="border-l flex flex-col transition-all w-[400px]">
        <div class="p-4 flex justify-end gap-2 border-b">
          <button id="right-full" class="p-2 hover:bg-accent rounded-lg">‚¨ú</button>
          <button id="right-half" class="p-2 hover:bg-accent rounded-lg">¬Ω</button>
          <button id="right-quarter" class="p-2 hover:bg-accent rounded-lg">‚ùè</button>
          <button id="right-close" class="p-2 hover:bg-accent rounded-lg">‚úï</button>
        </div>
        {showChatAssistant && <ChatAssistant client:load />}
      </div>
    </div>

    <script is:inline>
      import { layoutStore, layoutActions, RightSize } from "@/stores/layout";

      // Initialize layout
      layoutActions.initLayout();

      // Add click handlers with proper binding
      document.getElementById('toggle-left')?.addEventListener('click', () => layoutActions.toggleLeft());
      document.getElementById('toggle-right')?.addEventListener('click', () => layoutActions.toggleRight());
      document.getElementById('right-full')?.addEventListener('click', () => layoutActions.setRightSize(RightSize.Full));
      document.getElementById('right-half')?.addEventListener('click', () => layoutActions.setRightSize(RightSize.Half));
      document.getElementById('right-quarter')?.addEventListener('click', () => layoutActions.setRightSize(RightSize.Quarter));
      document.getElementById('right-close')?.addEventListener('click', () => layoutActions.setRightSize(RightSize.Closed));

      // Subscribe to store updates
      layoutStore.subscribe((state) => {
        const leftSidebar = document.getElementById('left-sidebar');
        const topHeader = document.getElementById('top-header');
        const bottomFooter = document.getElementById('bottom-footer');
        const rightPanel = document.getElementById('right-panel');

        if (leftSidebar) leftSidebar.style.display = state.showLeft ? 'block' : 'none';
        if (topHeader) topHeader.style.display = state.showTop ? 'flex' : 'none';
        if (bottomFooter) bottomFooter.style.display = state.showBottom ? 'flex' : 'none';
        if (rightPanel) {
          rightPanel.style.display = state.showRight ? 'flex' : 'none';
          
          switch(state.rightSize) {
            case RightSize.Full:
              rightPanel.style.width = '100%';
              break;
            case RightSize.Half:
              rightPanel.style.width = '50%';
              break;
            case RightSize.Quarter:
              rightPanel.style.width = '400px';
              break;
            case RightSize.Closed:
              rightPanel.style.width = '0';
              break;
          }
        }
      });
    </script>
  </body>
</html>